import { createElement } from '@lwc/engine-dom';
import LicensingTimeline from 'c/licensingTimeline';
import { getLicensesForContent } from '@salesforce/apex/LicenseController';
import { setImmediate } from 'timers';

// Mock the Apex wire adapter
jest.mock('@salesforce/apex/LicenseController', () => ({
    getLicensesForContent: jest.fn()
}), { virtual: true });

describe('c-licensing-timeline', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('TODO: test case generated by CLI command, please fill in test logic', () => {
        // Arrange
        const element = createElement('c-licensing-timeline', {
            is: LicensingTimeline
        });

        // Act
        document.body.appendChild(element);

        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });

    it('should render the component correctly', () => {
        const element = createElement('c-licensing-timeline', {
            is: LicensingTimeline
        });
        document.body.appendChild(element);
        expect(element).toMatchSnapshot();
    });

    it('should display licenses when data is returned from the wire service', async () => {
        const element = createElement('c-licensing-timeline', {
            is: LicensingTimeline
        });
        document.body.appendChild(element);

        // Mock data for licenses
        const mockLicenses = [
            { Id: '1', Name: 'License 1', License_Type__c: 'Type A', Start_Date__c: '2023-01-01', End_Date__c: '2023-12-31', Status__c: 'Active' },
            { Id: '2', Name: 'License 2', License_Type__c: 'Type B', Start_Date__c: '2023-02-01', End_Date__c: '2023-11-30', Status__c: 'Active' }
        ];

        // Emit mock data from the wire service
        getLicensesForContent.emit(mockLicenses);

        // Wait for reactivity
        await Promise.resolve();

        // Check if the correct number of licenses are displayed
        const licenseItems = element.shadowRoot.querySelectorAll('.slds-box');
        expect(licenseItems.length).toBe(mockLicenses.length);

        // Check if the first license has the correct name
        const firstLicenseName = licenseItems[0].querySelector('p').textContent;
        expect(firstLicenseName).toContain(mockLicenses[0].Name);
    });

    it('should filter licenses based on search input', async () => {
        const element = createElement('c-licensing-timeline', {
            is: LicensingTimeline
        });
        document.body.appendChild(element);

        // Mock data for licenses
        const mockLicenses = [
            { Id: '1', Name: 'License 1', License_Type__c: 'Type A', Start_Date__c: '2023-01-01', End_Date__c: '2023-12-31', Status__c: 'Active' },
            { Id: '2', Name: 'License 2', License_Type__c: 'Type B', Start_Date__c: '2023-02-01', End_Date__c: '2023-11-30', Status__c: 'Active' }
        ];

        // Emit mock data from the wire service
        getLicensesForContent.emit(mockLicenses);

        // Wait for reactivity
        await Promise.resolve();

        // Simulate user input in the search field
        const searchInput = element.shadowRoot.querySelector('lightning-input');
        searchInput.value = 'License 1';
        searchInput.dispatchEvent(new CustomEvent('change'));

        // Wait for reactivity
        await Promise.resolve();

        // Check if the correct number of filtered licenses are displayed
        const licenseItems = element.shadowRoot.querySelectorAll('.slds-box');
        expect(licenseItems.length).toBe(1);

        // Check if the first filtered license has the correct name
        const firstLicenseName = licenseItems[0].querySelector('p').textContent;
        expect(firstLicenseName).toContain('License 1');
    });

    it('should handle errors from the wire service gracefully', async () => {
        const element = createElement('c-licensing-timeline', {
            is: LicensingTimeline
        });
        document.body.appendChild(element);

        // Simulate an error from the wire service
        const error = { message: 'An error occurred' };
        getLicensesForContent.error(error);

        // Wait for reactivity
        await Promise.resolve();

        // Check if an error message is displayed
        const errorMessage = element.shadowRoot.querySelector('.error-message');
        expect(errorMessage.textContent).toBe('Error loading licenses: ' + error.message);
    });
});