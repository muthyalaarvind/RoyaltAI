import { createElement } from '@lwc/engine-dom';
import PaymentList from 'c/paymentList';
import { registerLdsTestWireAdapter } from '@salesforce/sfdx-lwc-jest';
import getAllPayments from '@salesforce/apex/PaymentController.getAllPayments';
import getReceipt from '@salesforce/apex/PaymentController.getReceipt';

const mockPayments = require('./data/payments.json');
const mockReceipt = require('./data/receipt.json');
const mockError = require('./data/error.json');

const getAllPaymentsAdapter = registerLdsTestWireAdapter(getAllPayments);

jest.mock(
  '@salesforce/apex/PaymentController.getReceipt',
  () => {
    return {
      default: jest.fn()
    };
  },
  { virtual: true }
);

describe('c-payment-list', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('TODO: test case generated by CLI command, please fill in test logic', () => {
        // Arrange
        const element = createElement('c-payment-list', {
            is: PaymentList
        });

        // Act
        document.body.appendChild(element);

        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });

    it('should render the component', () => {
        const element = createElement('c-payment-list', {
            is: PaymentList
        });
        document.body.appendChild(element);
        expect(element).toBeTruthy();
    });

    it('should display payment records in the datatable', () => {
        const element = createElement('c-payment-list', {
            is: PaymentList
        });
        document.body.appendChild(element);

        getAllPaymentsAdapter.emit(mockPayments);

        return Promise.resolve().then(() => {
            const datatable = element.shadowRoot.querySelector('lightning-datatable');
            expect(datatable).not.toBeNull();
            expect(datatable.data.length).toBe(mockPayments.length);
        });
    });

    it('should handle search functionality', () => {
        const element = createElement('c-payment-list', {
            is: PaymentList
        });
        document.body.appendChild(element);

        getAllPaymentsAdapter.emit(mockPayments);

        return Promise.resolve().then(() => {
            const searchInput = element.shadowRoot.querySelector('lightning-input');
            searchInput.value = 'Payment 1';
            searchInput.dispatchEvent(new CustomEvent('change'));

            return Promise.resolve().then(() => {
                const datatable = element.shadowRoot.querySelector('lightning-datatable');
                expect(datatable.data.length).toBe(1);
            });
        });
    });

    it('should handle row action for generating receipt', () => {
        const element = createElement('c-payment-list', {
            is: PaymentList
        });
        document.body.appendChild(element);

        getAllPaymentsAdapter.emit(mockPayments);

        return Promise.resolve().then(() => {
            getReceipt.mockResolvedValue(mockReceipt);

            const datatable = element.shadowRoot.querySelector('lightning-datatable');
            const rowActionEvent = new CustomEvent('rowaction', {
                detail: {
                    action: { name: 'generate' },
                    row: { Id: '1' }
                }
            });
            datatable.dispatchEvent(rowActionEvent);

            return Promise.resolve().then(() => {
                expect(getReceipt).toHaveBeenCalled();
                expect(element.receipt).toBe(mockReceipt);
            });
        });
    });

    it('should display an error if payment data fails to load', () => {
        const element = createElement('c-payment-list', {
            is: PaymentList
        });
        document.body.appendChild(element);

        getAllPaymentsAdapter.error(mockError);

        return Promise.resolve().then(() => {
            const errorDiv = element.shadowRoot.querySelector('.slds-text-color_error');
            expect(errorDiv.textContent).toBe('Error loading payments: ' + mockError.body.message);
        });
    });

    it('should display an error if receipt data fails to load', () => {
        const element = createElement('c-payment-list', {
            is: PaymentList
        });
        document.body.appendChild(element);

        getAllPaymentsAdapter.emit(mockPayments);

        return Promise.resolve().then(() => {
            getReceipt.mockRejectedValue(mockError);

            const datatable = element.shadowRoot.querySelector('lightning-datatable');
            const rowActionEvent = new CustomEvent('rowaction', {
                detail: {
                    action: { name: 'generate' },
                    row: { Id: '1' }
                }
            });
            datatable.dispatchEvent(rowActionEvent);

            return Promise.resolve().then(() => {
                const errorDiv = element.shadowRoot.querySelector('.slds-text-color_error');
                expect(errorDiv.textContent).toBe('Error loading payments: ' + mockError.body.message);
            });
        });
    });
});