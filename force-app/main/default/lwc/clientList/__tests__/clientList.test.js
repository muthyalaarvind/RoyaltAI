import { createElement } from '@lwc/engine-dom';
import ClientList from 'c/clientList';

describe('c-client-list', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('TODO: test case generated by CLI command, please fill in test logic', () => {
        // Arrange
        const element = createElement('c-client-list', {
            is: ClientList
        });

        // Act
        document.body.appendChild(element);

        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });

    it('should render the component', () => {
        const element = createElement('c-client-list', {
            is: ClientList
        });
        document.body.appendChild(element);

        // Verify the component rendered
        expect(element.shadowRoot.children).not.toHaveLength(0);
    });

    it('should display client records in the datatable', () => {
        const element = createElement('c-client-list', {
            is: ClientList
        });
        document.body.appendChild(element);

        // Set mock data for client records
        const mockClients = [
            { Id: '1', Name: 'Client 1', Company_Name__c: 'ABC Inc', Contact_Person__c: 'John Doe', Email__c: 'john.doe@example.com', Industry__c: 'Technology', Phone__c: '1234567890' },
            { Id: '2', Name: 'Client 2', Company_Name__c: 'XYZ Corp', Contact_Person__c: 'JaneSON_0>', Email__c: 'jane.smith@example.com', Industry__c: 'Finance', Phone__c: '0987654321' }
        ];
        element.clientRecords = mockClients;

        // Verify the datatable displays the correct number of records
        const datatable = element.shadowRoot.querySelector('lightning-datatable');
        expect(datatable).not.toBeNull();
        expect(datatable.data).toHaveLength(mockClients.length);
    });

    it('should handle search functionality', () => {
        const element = createElement('c-client-list', {
            is: ClientList
        });
        document.body.appendChild(element);

        // Set mock data for client records
        const mockClients = [
            { Id: '1', Name: 'Client 1', Company_Name__c: 'ABC Inc', Contact_Person__c: 'John Doe', Email__c: 'john.doe@example.com', Industry__c: 'Technology', Phone__c: '1234567890' },
            { Id: '2', Name: 'Client 2', Company_Name__c: 'XYZ Corp', Contact_Person__c: 'Jane Smith', Email__c: 'jane.smith@example.com', Industry__c: 'Finance', Phone__c: '0987654321' }
        ];
        element.clientRecords = mockClients;

        // Simulate search input
        const searchInput = element.shadowRoot.querySelector('lightning-input');
        searchInput.value = 'Client 1';
        searchInput.dispatchEvent(new CustomEvent('change'));

        // Verify the datatable displays the filtered records
        const datatable = element.shadowRoot.querySelector('lightning-datatable');
        expect(datatable).not.toBeNull();
        expect(datatable.data).toHaveLength(1);
    });

    it('should handle empty client records', () => {
        const element = createElement('c-client-list', {
            is: ClientList
        });
        document.body.appendChild(element);

        // Set empty data for client records
        element.clientRecords = [];

        // Verify the datatable is empty
        const datatable = element.shadowRoot.querySelector('lightning-datatable');
        expect(datatable).not.toBeNull();
        expect(datatable.data).toHaveLength(0);
    });

    it('should handle no search results', () => {
        const element = createElement('c-client-list', {
            is: ClientList
        });
        document.body.appendChild(element);

        // Set mock data for client records
        const mockClients = [
            { Id: '1', Name: 'Client 1', Company_Name__c: 'ABC Inc', Contact_Person__c: 'John Doe', Email__c: 'john.doe@example.com', Industry__c: 'Technology', Phone__c: '1234567890' },
            { Id: '2', Name: 'Client 2', Company_Name__c: 'XYZ Corp', Contact_Person__c: 'Jane Smith', Email__c: 'jane.smith@example.com', Industry__c: 'Finance', Phone__c: '0987654321' }
        ];
        element.clientRecords = mockClients;

        // Simulate search input with no results
        const searchInput = element.shadowRoot.querySelector('lightning-input');
        searchInput.value = 'Nonexistent Client';
        searchInput.dispatchEvent(new CustomEvent('change'));

        // Verify the datatable is empty
        const datatable = element.shadowRoot.querySelector('lightning-datatable');
        expect(datatable).not.toBeNull();
        expect(datatable.data).toHaveLength(0);
    });

    it('should handle error state when fetching client records', () => {
        const element = createElement('c-client-list', {
            is: ClientList
        });
        document.body.appendChild(element);

        // Simulate an error when fetching client records
        const error = new Error('Error fetching client records');
        element.error = error;

        // Verify the error message is displayed
        const errorMessage = element.shadowRoot.querySelector('.error-message');
        expect(errorMessage).not.toBeNull();
        expect(errorMessage.textContent).toBe('Error fetching client records');
    });
});